### Starting build.
# Target: dictionary.mli.depends, tags: { package(ANSITerminal), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), extension:mli, file:dictionary.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package yojson -package ANSITerminal -modules dictionary.mli > dictionary.mli.depends
# Target: dictionary.cmi, tags: { package(ANSITerminal), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), byte, compile, extension:mli, file:dictionary.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package yojson -package ANSITerminal -o dictionary.cmi dictionary.mli
# Target: dictionary.ml.depends, tags: { package(ANSITerminal), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), extension:ml, file:dictionary.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package yojson -package ANSITerminal -modules dictionary.ml > dictionary.ml.depends
# Target: dictionary.cmo, tags: { package(ANSITerminal), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), byte, compile, extension:cmo, extension:ml, file:dictionary.cmo, file:dictionary.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package yojson -package ANSITerminal -o dictionary.cmo dictionary.ml
# Target: winnowing.mli.depends, tags: { package(ANSITerminal), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), extension:mli, file:winnowing.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package yojson -package ANSITerminal -modules winnowing.mli > winnowing.mli.depends
# Target: winnowing.cmi, tags: { package(ANSITerminal), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), byte, compile, extension:mli, file:winnowing.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package yojson -package ANSITerminal -o winnowing.cmi winnowing.mli
# Target: winnowing.ml.depends, tags: { package(ANSITerminal), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), extension:ml, file:winnowing.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package yojson -package ANSITerminal -modules winnowing.ml > winnowing.ml.depends
# Target: winnowing.cmo, tags: { package(ANSITerminal), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), byte, compile, extension:cmo, extension:ml, file:winnowing.cmo, file:winnowing.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package yojson -package ANSITerminal -o winnowing.cmo winnowing.ml
# Target: preprocessing.mli.depends, tags: { package(ANSITerminal), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), extension:mli, file:preprocessing.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package yojson -package ANSITerminal -modules preprocessing.mli > preprocessing.mli.depends
# Target: preprocessing.cmi, tags: { package(ANSITerminal), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), byte, compile, extension:mli, file:preprocessing.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package yojson -package ANSITerminal -o preprocessing.cmi preprocessing.mli
# Target: preprocessing.ml.depends, tags: { package(ANSITerminal), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), extension:ml, file:preprocessing.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package yojson -package ANSITerminal -modules preprocessing.ml > preprocessing.ml.depends
# Target: preprocessing.cmo, tags: { package(ANSITerminal), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), byte, compile, extension:cmo, extension:ml, file:preprocessing.cmo, file:preprocessing.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package yojson -package ANSITerminal -o preprocessing.cmo preprocessing.ml
# Target: main.mli.depends, tags: { package(ANSITerminal), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), extension:mli, file:main.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package yojson -package ANSITerminal -modules main.mli > main.mli.depends
# Target: comparison.mli.depends, tags: { package(ANSITerminal), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), extension:mli, file:comparison.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package yojson -package ANSITerminal -modules comparison.mli > comparison.mli.depends
# Target: comparison.cmi, tags: { package(ANSITerminal), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), byte, compile, extension:mli, file:comparison.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package yojson -package ANSITerminal -o comparison.cmi comparison.mli
# Target: main.cmi, tags: { package(ANSITerminal), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), byte, compile, extension:mli, file:main.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package yojson -package ANSITerminal -o main.cmi main.mli
# Target: main.ml.depends, tags: { package(ANSITerminal), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), extension:ml, file:main.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package yojson -package ANSITerminal -modules main.ml > main.ml.depends
+ ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package yojson -package ANSITerminal -modules main.ml > main.ml.depends
File "main.ml", line 132, characters 0-7:
Error: Syntax error
Command exited with code 2.
# Compilation unsuccessful.
